<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">

    <Style x:Key="TitleWindowButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="Width" Value="45"/>
        <Setter Property="Height" Value="30"/>
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Background="{TemplateBinding Background}">
                        <ContentPresenter HorizontalAlignment="Center"
                                          VerticalAlignment="Center"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="Foreground" Value="{DynamicResource ButtonForegroundColor}"/>
        <Setter Property="Background" Value="{DynamicResource ButtonBackgroundColor}"/>
        <Setter Property="FocusVisualStyle" Value="{DynamicResource FocusVisualStyle}"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border CornerRadius="5"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            Background="{TemplateBinding Background}"
                            Padding="{TemplateBinding Padding}">
                        <ContentPresenter VerticalAlignment="Center"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="TabButtonStyle"
           TargetType="{x:Type Button}"
           BasedOn="{StaticResource ButtonStyle}">
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource TabButtonMouseBackgroundColor}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="TreeViewButtonStyle"
           TargetType="{x:Type Button}"
           BasedOn="{StaticResource ButtonStyle}">
        <Setter Property="MinHeight" Value="24"/>
        <Setter Property="Padding" Value="8 6"/>
        <Setter Property="HorizontalContentAlignment" Value="Left"/>
        <Setter Property="Foreground" Value="{DynamicResource TreeViewButtonForegroundColor}"/>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource ButtonMouseBackgroundColor}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="InstrumentButtonStyle"
           TargetType="{x:Type Button}"
           BasedOn="{StaticResource ButtonStyle}">
        <Setter Property="Width" Value="32"/>
        <Setter Property="Height" Value="32"/>
        <Setter Property="Margin" Value="0 0 7 0"/>
        <Setter Property="Foreground" Value="{DynamicResource InstrumentButtonForegroundColor}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border CornerRadius="5"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            Background="{TemplateBinding Background}"
                            Padding="{TemplateBinding Padding}">
                        <ContentPresenter VerticalAlignment="Center"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}">
                            <ContentPresenter.RenderTransform>
                                <ScaleTransform x:Name="ContentPresenterScale"
                                                CenterX="10" CenterY="10"/>
                            </ContentPresenter.RenderTransform>
                        </ContentPresenter>
                    </Border>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="{DynamicResource ButtonMouseBackgroundColor}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value="0.5"/>
                        </Trigger>
                        <Trigger Property="IsMouseCaptured" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="ContentPresenterScale"
                                                         Storyboard.TargetProperty="(ScaleTransform.ScaleX)"
                                                         To="0.95" Duration="00:00:00.05"/>
                                        <DoubleAnimation Storyboard.TargetName="ContentPresenterScale"
                                                         Storyboard.TargetProperty="(ScaleTransform.ScaleY)"
                                                         To="0.95" Duration="00:00:00.05"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="ContentPresenterScale"
                                                         Storyboard.TargetProperty="(ScaleTransform.ScaleX)"
                                                         To="1" Duration="00:00:00.1"/>
                                        <DoubleAnimation Storyboard.TargetName="ContentPresenterScale"
                                                         Storyboard.TargetProperty="(ScaleTransform.ScaleY)"
                                                         To="1" Duration="00:00:00.1"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ListHeaderButtonStyle"
           TargetType="{x:Type Button}"
           BasedOn="{StaticResource ButtonStyle}">
        <Setter Property="Background" Value="Transparent"/>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource HeaderBorderMouseBackgroundColor}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="PathListButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border CornerRadius="3"
                            BorderThickness="0"
                            Background="{TemplateBinding Background}"
                            Padding="{TemplateBinding Padding}">
                        <ContentPresenter VerticalAlignment="Center"
                                          HorizontalAlignment="Center"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="{DynamicResource PathListButtonBackgroundColor}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="PopupButtonStyle"
           TargetType="{x:Type Button}"
           BasedOn="{StaticResource ButtonStyle}">
        <Setter Property="MinWidth" Value="60"/>
        <Setter Property="BorderThickness" Value="0 0 0 1"/>
        <Setter Property="BorderBrush" Value="{DynamicResource PopupButtonBorderBrushColor}"/>
        <Setter Property="Foreground" Value="{DynamicResource PopupButtonForegroundColor}"/>
        <Setter Property="Background" Value="{DynamicResource PopupButtonBackgroundColor}"/>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="BorderBrush" Value="{DynamicResource PopupButtonMouseBorderBrushColor}"/>
                <Setter Property="Background" Value="{DynamicResource PopupButtonMouseBackgroundColor}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="DialogTitleButtonStyle"
           TargetType="{x:Type Button}"
           BasedOn="{StaticResource ButtonStyle}">
        <Setter Property="Foreground" Value="{DynamicResource PopupButtonForegroundColor}"/>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource PopupButtonMouseBackgroundColor}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="{x:Type ToggleButton}">
        <Setter Property="FocusVisualStyle" Value="{DynamicResource FocusVisualStyle}"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border Width="32" Height="16"
                            CornerRadius="8"
                            BorderThickness="1"
                            BorderBrush="{DynamicResource ToggleButtonBorderBrushColor}"
                            Background="{TemplateBinding Background}">
                        <Ellipse x:Name="Ellipse"
                                 Width="8" Height="8"
                                 Fill="{DynamicResource ToggleButtonEllipseFillColor}"
                                 HorizontalAlignment="Left"
                                 Margin="3"/>
                    </Border>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="HorizontalAlignment" TargetName="Ellipse" Value="Right"/>
                            <Setter Property="Fill" TargetName="Ellipse" Value="{DynamicResource ToggleButtonCheckedEllipseFillColor}"/>
                            <Setter Property="Background" Value="{DynamicResource ToggleButtonCheckedBackgroundColor}"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Width" TargetName="Ellipse" Value="10"/>
                            <Setter Property="Height" TargetName="Ellipse" Value="10"/>
                            <Setter Property="Margin" TargetName="Ellipse" Value="2"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

</ResourceDictionary>